# navigation/api_stub.py
from typing import Any, Dict, List
import json

class APISimulator:
    """
    –£–º–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API.
    –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –∫–ª—é—á –≤ MOCK_DATA.
    –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ requests/aiohttp.
    """
    MOCK_DATA = {
        "/api/teacher/tracks": [
            {"id": "game-design", "name": "–ì–µ–π–º–¥–∏–∑–∞–π–Ω"},
            {"id": "architecture", "name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"},
        ],
        "/api/metrics": [
            {"id": "creative", "name": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"},
            {"id": "result", "name": "–†–µ–∑—É–ª—å—Ç–∞—Ç"},
            {"id": "teamwork", "name": "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ"},
            {"id": "initiative", "name": "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"},
            {"id": "discipline", "name": "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"},
            {"id": "communication", "name": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"},
            {"id": "problem_solving", "name": "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"},
            {"id": "leadership", "name": "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ"},
            {"id": "adaptability", "name": "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å"},
            {"id": "accuracy", "name": "–¢–æ—á–Ω–æ—Å—Ç—å"},
            {"id": "persistence", "name": "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"},
            {"id": "ethics", "name": "–≠—Ç–∏—á–Ω–æ—Å—Ç—å"},
        ],
        "/api/tracks/game-design/students": [
            {"id": "ivanov", "full_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"},
            {"id": "petrov", "full_name": "–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä"},
        ],
        "/api/tracks/architecture/students": [
            {"id": "sidorov", "full_name": "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä"},
        ],
        "/api/teacher/recent_students": [
            {"id": "ivanov", "full_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"},
            {"id": "sidorov", "full_name": "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä"},
        ]
    }

    def call(self, url: str, method: str = "GET", **kwargs) -> List[Dict[str, Any]]:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç API-–≤—ã–∑–æ–≤.
        :param url: –ø—É—Ç—å (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —à–∞–±–ª–æ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä /api/tracks/{{track_id}}/students)
        :param method: HTTP-–º–µ—Ç–æ–¥ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≥–ª—É—à–∫–µ)
        :return: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        """
        # üî• –û–ü–ê–°–ù–û–ï –ú–ï–°–¢–û: –µ—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —É–ø–∞–¥—ë–º!
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: –æ–±–µ—Ä–Ω–∏ –≤ try/except –∏ –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ—à–∏–±–∫—É
        if url in self.MOCK_DATA:
            return self.MOCK_DATA[url]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ "–ø–æ —à–∞–±–ª–æ–Ω—É" (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        # –ù–∞–ø—Ä–∏–º–µ—Ä: /api/tracks/game-design/students ‚Üí –∏—â–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –ø—É—Ç–∏
        for key in self.MOCK_DATA:
            if key.startswith("/api/tracks/") and key.endswith("/students"):
                if url.startswith("/api/tracks/") and url.endswith("/students"):
                    return self.MOCK_DATA[key]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ª–æ–≥–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []